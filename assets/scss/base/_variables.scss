//  Variables

// Colors

$bgcolor:                   #f7f7f7;
$color_white:               #ffffff;
$color_gray:                #d5d5d5;

$primary_color:             #000000;
$secondary_color:           #12699b;

$secondary_color_darker:    #9f2865;
$light_color:               #9a9a9a;
$dark_color:                #313131;
$border_color:              #f4f4f4;

$color_social:              #999999;
$color_slider-mind:         #eef4f8;


// Fonts

$primary_font: 'Roboto', sans-serif;
$secondary_font: 'NewBaskervilleC', sans-serif;

$font-size-base: 10px;

$time: 0.3s;


// Social
$socials: (
        fb: #12699b,
        tw: #12699b,
        yb: #12699b,
        inst: #12699b,
        vk: #12699b,
        goo: #12699b,
        rss: #12699b
);



//------------------------------------------------------------------------------
//  Grid
//------------------------------------------------------------------------------
//  Bootstrap v4
//------------------------------------------------------------------------------

@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}


//  Grid breakpoints
//
//  Define the minimum dimensions at which your layout will change,
//  adapting to different screen sizes, for use in media queries.

$grid-breakpoints: (
        xs: 0,
        sm: 576px,
        md: 768px,
        lg: 992px,
        xl: 1200px
) !default;
@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
@include _assert-starts-at-zero($grid-breakpoints);


//  Grid containers
//
//  Define the maximum width of `.container` for different screen sizes.

$container-max-widths: (
        xl: 1300px
) !default;
@include _assert-ascending($container-max-widths, "$container-max-widths");


// Grid columns
//
// Set the number of columns and specify the width of the gutters.

$grid-columns:               12 !default;
$grid-gutter-width-base:     30px !default;
$grid-gutter-widths: (
        xs: $grid-gutter-width-base,
        sm: $grid-gutter-width-base,
        md: $grid-gutter-width-base,
        lg: $grid-gutter-width-base,
        xl: $grid-gutter-width-base
) !default;
